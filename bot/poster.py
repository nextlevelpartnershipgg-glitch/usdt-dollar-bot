# bot/poster.py
import os
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import textwrap
from datetime import datetime

# ------- —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏–º) -------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # –ø—Ä–∏–º–µ—Ä: @usdtdollarm
if not BOT_TOKEN or not CHANNEL_ID:
    raise SystemExit("BOT_TOKEN / CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ Secrets/ENV")

# ------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ -------
def measure_text(draw, text, font):
    try:
        # –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± (Pillow 10+)
        box = draw.textbbox((0, 0), text, font=font)
        return box[2] - box[0], box[3] - box[1]
    except Exception:
        # fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        return font.getsize(text)

# ------- –Ω–∞–¥—ë–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ -------
def load_font(size=32, bold=False):
    candidates = []

    # 1) —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç—å –∏—Ö –≤ data/)
    if bold:
        candidates.append(os.path.join("data", "DejaVuSans-Bold.ttf"))
    else:
        candidates.append(os.path.join("data", "DejaVuSans.ttf"))

    # 2) —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ Linux (GH Actions)
    if bold:
        candidates += [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
            "/usr/share/fonts/truetype/freefont/FreeSansBold.ttf",
        ]
    else:
        candidates += [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "/usr/share/fonts/truetype/freefont/FreeSans.ttf",
        ]

    # 3) macOS
    candidates += [
        "/Library/Fonts/Arial.ttf",
        "/System/Library/Fonts/Supplemental/Arial.ttf",
    ]

    # 4) Windows (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)
    candidates += [
        "C:\\Windows\\Fonts\\arial.ttf",
        "C:\\Windows\\Fonts\\arialbd.ttf",
    ]

    for path in candidates:
        try:
            if os.path.exists(path):
                return ImageFont.truetype(path, size)
        except Exception:
            continue

    # —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å
    return ImageFont.load_default()

# ------- —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º -------
def draw_header_image(title: str, source: str, event_time: str):
    width, height = 800, 400
    img = Image.new("RGB", (width, height), (30, 30, 30))
    draw = ImageDraw.Draw(img)

    # –≥—Ä–∞–¥–∏–µ–Ω—Ç (—Ä—É—á–Ω–æ–π, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Pillow)
    for i in range(height):
        r = 40 + int(i * 100 / height)
        g = 30 + int(i * 60 / height)
        b = 90 + int(i * 40 / height)
        draw.line([(0, i), (width, i)], fill=(r, g, b))

    font_title = load_font(40, bold=True)
    font_small = load_font(22, bold=False)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    margin, offset = 40, 120
    for line in textwrap.wrap(title, width=30):
        draw.text((margin, offset), line, font=font_title, fill="white")
        _, th = measure_text(draw, line, font_title)
        offset += th + 10

    # –Ω–∏–∂–Ω–∏–π —Ñ—É—Ç–µ—Ä
    footer_text = f"source: {source}   ‚Ä¢   —Å–æ–±—ã—Ç–∏–µ: {event_time}"
    tw, th = measure_text(draw, footer_text, font_small)
    draw.text((width - tw - 20, height - th - 20), footer_text, font=font_small, fill="white")

    # –ø—Ä–æ—Å—Ç–∞—è ¬´–ø–ª–∞—à–∫–∞-–ª–æ–≥–æ¬ª
    logo_size = 60
    logo = Image.new("RGB", (logo_size, logo_size), (200, 200, 200))
    logo_draw = ImageDraw.Draw(logo)
    logo_draw.ellipse((0, 0, logo_size, logo_size), fill=(120, 120, 120))
    img.paste(logo, (20, 20))

    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# ------- –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É -------
def build_full_caption(title, lead, details, link, hidden_tags):
    def esc(s: str) -> str:
        return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    caption = f"<b>{esc(title)}</b>\n\n"
    if lead:
        caption += f"üì∞ {esc(lead)}\n\n"
    if details:
        caption += f"<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>\n{esc(details)}\n\n"
    if link:
        caption += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{esc(link)}'>{esc(link)}</a>\n\n"
    if hidden_tags:
        caption += "".join([f"#{esc(tag)} " for tag in hidden_tags])
    # –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ Telegram = 1024 —Å–∏–º–≤–æ–ª–∞
    return caption[:1024]

# ------- –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram -------
def send_post(title, lead, details, source, link, hidden_tags):
    event_time = datetime.now().strftime("%d.%m %H:%M")
    header_img = draw_header_image(title, source, event_time)
    caption = build_full_caption(title, lead, details, link, hidden_tags)

    files = {"photo": ("header.png", header_img.getvalue(), "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption, "parse_mode": "HTML"}

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    r = requests.post(url, data=data, files=files, timeout=30)
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", r.status_code, r.text)
        r.raise_for_status()
    else:
        print("–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:", title)

# ======= –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) =======
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ‚Äî –æ–Ω –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å—ë —Ä–∏—Å—É–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
    send_post(
        title="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏",
        lead="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–∏–∫—Å–∞ —à—Ä–∏—Ñ—Ç–æ–≤.",
        details="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤ ‚Äî –ø–æ–¥–ø–∏—Å—å –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±—Ä–µ–∂–µ—Ç—Å—è –ø–æ –ª–∏–º–∏—Ç—É Telegram.",
        source="rbc.ru",
        link="https://rbc.ru/test",
        hidden_tags=["–Ω–æ–≤–æ—Å—Ç–∏", "–ø—Ä–æ–≤–µ—Ä–∫–∞"]
    )
