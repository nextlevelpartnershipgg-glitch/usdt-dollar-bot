import os, io, json, time, textwrap, pathlib, hashlib, urllib.parse, sys, random
from datetime import datetime, timezone
from dateutil import parser as dtparse
import feedparser, requests
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageEnhance
from zoneinfo import ZoneInfo

# ====== –û–ö–†–£–ñ–ï–ù–ò–ï ======
BOT_TOKEN  = os.environ["8304198834:AAFmxWDHpFMQebf_Ns0TQi3B8nRldqgbxJg"]
CHANNEL_ID = os.environ["usdtdollarm"]              # @USDT_Dollar –∏–ª–∏ -100xxxxxxxxx
TIMEZONE   = os.environ.get("TIMEZONE", "Europe/Moscow")

# –†—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
RSS_FEEDS = [
    "https://rssexport.rbc.ru/rbcnews/news/30/full.rss",  # –†–ë–ö
    "https://lenta.ru/rss/news",                          # Lenta.ru
    "https://www.gazeta.ru/export/rss/lenta.xml",         # –ì–∞–∑–µ—Ç–∞.ru
    "https://tass.ru/rss/v2.xml",                         # –¢–ê–°–°
    "https://www.kommersant.ru/RSS/news.xml",             # –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä
]

# –•—ç—à—Ç–µ–≥–∏
TAGS = "#–Ω–æ–≤–æ—Å—Ç–∏ #—Ä—ã–Ω–∫–∏ #—ç–∫–æ–Ω–æ–º–∏–∫–∞ #–∞–∫—Ü–∏–∏ #usdt #–¥–æ–ª–ª–∞—Ä"

# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∏–¥—É)
DATA_DIR = pathlib.Path("data"); DATA_DIR.mkdir(parents=True, exist_ok=True)
STATE_FILE = DATA_DIR / "state.json"

# ====== –£–¢–ò–õ–ò–¢–´ ======
def load_state():
    if STATE_FILE.exists():
        return json.loads(STATE_FILE.read_text(encoding="utf-8"))
    return {}

def save_state(state):
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

def domain(url):
    return urllib.parse.urlparse(url).netloc.replace("www.", "") or "source"

def clean_html(html):
    if not html:
        return ""
    soup = BeautifulSoup(html, "html.parser")
    return " ".join(soup.get_text(separator=" ").split())

def make_caption(title, summary, link):
    title = title.strip()
    summary = (summary or "").strip()
    if len(summary) > 300:
        summary = summary[:297] + "‚Ä¶"
    caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    if len(caption) > 1020:  # –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ Telegram
        extra = len(caption) - 1020
        summary = summary[:-extra-1] + "‚Ä¶"
        caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    return caption

# --- –ø–æ–¥–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
KEYMAP = [
    (["–§–†–°","—Å—Ç–∞–≤–∫","–∏–Ω—Ñ–ª—è—Ü","CPI","PPI","–ø—Ä–æ—Ü–µ–Ω—Ç"], "interest rates,economy,bank"),
    (["–Ω–µ—Ñ—Ç—å","–±—Ä–µ–Ω—Ç","wti","oil","–û–ü–ï–ö"], "oil,barrels,energy,refinery"),
    (["–≥–∞–∑","–≥–∞–∑–ø—Ä","lng","–≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥"], "natural gas,energy,pipeline"),
    (["—Ä—É–±–ª","ruble","—Ä—É–±"], "ruble,currency,money"),
    (["–¥–æ–ª–ª–∞—Ä","usd","dxy","usdt"], "dollar,currency,finance"),
    (["–±–∏—Ç–∫–æ–∏–Ω","bitcoin","btc","–∫—Ä–∏–ø—Ç","crypto","ether","eth"], "crypto,blockchain,bitcoin,ethereum"),
    (["–∞–∫—Ü–∏","–∏–Ω–¥–µ–∫—Å","s&p","nasdaq","—Ä—ã–Ω–æ–∫","–±–∏—Ä–∂–∞"], "stocks,stock market,ticker,wall street"),
    (["–µ–≤—Ä–æ","eur"], "euro,currency,finance"),
    (["–∑–æ–ª–æ—Ç–æ","gold","xau"], "gold,precious metal,ingots"),
]

def pick_photo_query(title, summary):
    text = f"{title} {summary}".lower()
    for keys, q in KEYMAP:
        if any(k.lower() in text for k in keys):
            return q
    # fallback ‚Äî –æ–±—â–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–µ–º–∞
    return "finance,markets,city night,news"

def fetch_unsplash_image(query, w=1080, h=540):
    # –ë–µ–∑ API-–∫–ª—é—á–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–æ—Ç–æ
    # –ü—Ä–∏–º–µ—Ä: https://source.unsplash.com/1080x540/?finance,stocks
    seed = random.randint(0, 10_000_000)
    url = f"https://source.unsplash.com/{w}x{h}/?{urllib.parse.quote(query)}&sig={seed}"
    r = requests.get(url, timeout=25)
    r.raise_for_status()
    try:
        img = Image.open(io.BytesIO(r.content)).convert("RGB")
        return img
    except Exception:
        return None

def ensure_bg(img, w=1080, h=540):
    if img is None:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –≥—Ä–∞–¥–∏–µ–Ω—Ç
        bg = Image.new("RGB", (w, h), (24, 26, 28))
        return bg
    # –ø–æ–¥—Ä–æ–≤–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä/–∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    img = img.resize((w, h))
    # –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è + –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–ª—Å—è
    img = img.filter(ImageFilter.GaussianBlur(radius=0.6))
    img = ImageEnhance.Brightness(img).enhance(0.8)
    return img

# --- –∫–∞—Ä—Ç–æ—á–∫–∞ 1080x540, —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
def draw_card_quote(title_text, summary_text, src_domain, tzname):
    W, H = 1080, 540
    # –ø–æ–¥–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
    query = pick_photo_query(title_text, summary_text)
    bg = ensure_bg(fetch_unsplash_image(query, W, H), W, H)
    d = ImageDraw.Draw(bg)

    # –∑–∞—Ç–µ–º–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–¥ —Ç–µ–∫—Å—Ç (–º—è–≥–∫–∞—è –ø–ª–∞—à–∫–∞)
    overlay = Image.new("RGBA", (W, H), (0,0,0,0))
    od = ImageDraw.Draw(overlay)
    od.rectangle([40, 100, W-40, H-80], fill=(0,0,0,120), outline=None, width=0, radius=28)
    bg = Image.alpha_composite(bg.convert("RGBA"), overlay).convert("RGB")

    d = ImageDraw.Draw(bg)

    # –®—Ä–∏—Ñ—Ç—ã
    font_brand   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 34)
    font_time    = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 26)
    font_quote   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 40)
    font_title   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 50)
    font_small   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24)
    font_quote_mark = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 80)

    # –í–µ—Ä—Ö: –±—Ä–µ–Ω–¥ + –≤—Ä–µ–º—è
    brand = "USDT=Dollar"
    d.text((48, 30), brand, fill=(255,255,255), font=font_brand)

    try:
        tz = ZoneInfo(tzname)
    except Exception:
        tz = ZoneInfo("UTC")
    now_str = datetime.now(tz).strftime("%d.%m %H:%M")
    d.text((W - 48 - d.textlength(now_str, font=font_time), 30), now_str, fill=(255,255,255), font=font_time)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞
    margin_x = 72
    y = 120

    # –ë–æ–ª—å—à–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
    d.text((margin_x - 20, y - 20), "‚Äú", fill=(255,255,255), font=font_quote_mark)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∂–∏—Ä–Ω—ã–π)
    for line in textwrap.wrap(title_text.strip(), width=28)[:3]:
        d.text((margin_x + 50, y), line, font=font_title, fill=(255,255,255))
        y += 58

    # –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (–æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    if summary_text:
        short = summary_text.strip().replace("\n", " ")
        if len(short) > 260:
            short = short[:257] + "‚Ä¶"
        y += 12
        for ln in textwrap.wrap(short, width=40):
            if y + 42 > H - 100:
                break
            d.text((margin_x + 50, y), ln, font=font_quote, fill=(230,230,230))
            y += 42

    # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
    d.text((W - 110, H - 140), "‚Äù", fill=(255,255,255), font=font_quote_mark)

    # –ù–∏–∑: –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–º–µ–Ω
    src = f"source: {src_domain}"
    d.text((72, H - 56), src, font=font_small, fill=(220,220,220))

    # –ò—Ç–æ–≥ ‚Äî –≤ –ø–∞–º—è—Ç—å
    bio = io.BytesIO()
    bg.save(bio, format="PNG", optimize=True)
    bio.seek(0)
    return bio

def send_photo(photo_bytes, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    files = {"photo": ("cover.png", photo_bytes, "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption}
    r = requests.post(url, files=files, data=data, timeout=30)
    r.raise_for_status()
    return r.json()

# ====== –õ–û–ì–ò–ö–ê ======
def process_item(link, title, summary):
    # –ü–æ–¥–ø–∏—Å—å
    cap  = make_caption(title, summary, link or "")
    # –ö–∞—Ä—Ç–æ—á–∫–∞-—Ü–∏—Ç–∞—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    card = draw_card_quote(title, summary, domain(link or ""), TIMEZONE)
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    send_photo(card, cap)

def run_cron_mode():
    state = load_state()
    for feed_url in RSS_FEEDS:
        fp = feedparser.parse(feed_url)
        if not fp.entries:
            continue

        def parse_dt(e):
            ts = getattr(e, "published", getattr(e, "updated", "")) or ""
            try:
                return dtparse.parse(ts)
            except Exception:
                return datetime(1970,1,1, tzinfo=timezone.utc)

        entry = sorted(fp.entries, key=parse_dt, reverse=True)[0]

        link    = getattr(entry, "link", "") or ""
        title   = (getattr(entry, "title", "") or "").strip() or "(no title)"
        summary = clean_html(getattr(entry, "summary", getattr(entry, "description", "")))

        entry_uid = hashlib.sha256((link or title).encode("utf-8")).hexdigest()
        last_uid  = state.get(feed_url, "")

        if entry_uid == last_uid:
            continue  # —É–∂–µ –ø–æ—Å—Ç–∏–ª–∏ —ç—Ç—É –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ —Ñ–∏–¥–∞

        try:
            process_item(link, title, summary)
            state[feed_url] = entry_uid
            time.sleep(1.0)  # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        except Exception as e:
            print("Error sending:", e)

    save_state(state)

def run_single_mode():
    title   = os.environ.get("USDT_TITLE", "").strip()
    link    = os.environ.get("USDT_LINK", "")
    summary = clean_html(os.environ.get("USDT_SUM", ""))
    if not title:
        print("No USDT_TITLE provided")
        return
    try:
        process_item(link, title, summary)
    except Exception as e:
        print("Error sending single:", e)

if __name__ == "__main__":
    if "--single" in sys.argv:
        run_single_mode()
    else:
        run_cron_mode()
