# bot/poster.py
import os
import re
import json
import time
import html
import textwrap
from io import BytesIO
from datetime import datetime, timezone
from urllib.parse import urlparse

import requests
import feedparser
from PIL import Image, ImageDraw, ImageFont

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # –ø—Ä–∏–º–µ—Ä: @usdtdollarm
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")

if not BOT_TOKEN or not CHANNEL_ID:
    raise SystemExit("BOT_TOKEN / CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –ó–∞–π–¥–∏ –≤ Settings ‚Üí Secrets ‚Üí Actions –∏ –¥–æ–±–∞–≤—å –∏—Ö.")

# –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
RSS_SOURCES = [
    "https://www.rbc.ru/rss/latest/?utm_source=rss&utm_medium=main",
    "https://lenta.ru/rss/news",
    "https://www.gazeta.ru/export/rss/lenta.xml",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://www.vedomosti.ru/rss/news",            # –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞–≤–∞—Ç—å 403 ‚Äî –æ–∫, –ø—Ä–æ–ø—É—Å—Ç–∏–º
    "https://www.interfax.ru/rss.asp",
    "https://iz.ru/xml/rss/all.xml",
    "https://ria.ru/export/rss2/archive/index.xml",
]

STATE_PATH = os.path.join("data", "posted.json")   # —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
MAX_CAPTION = 1024

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def ensure_dirs():
    os.makedirs("data", exist_ok=True)

def load_state():
    ensure_dirs()
    if not os.path.exists(STATE_PATH):
        return {"posted_links": []}
    try:
        with open(STATE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"posted_links": []}

def save_state(state):
    ensure_dirs()
    with open(STATE_PATH, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def clean_html(text: str) -> str:
    if not text:
        return ""
    text = html.unescape(text)
    text = re.sub(r"<br\s*/?>", "\n", text, flags=re.I)
    text = re.sub(r"<[^>]+>", "", text)
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∏—Ä–µ/–∫–∞–≤—ã—á–∫–∏
    text = text.replace("\xa0", " ").replace("&mdash;", "‚Äî").replace("&ndash;", "‚Äì")
    text = text.replace("&laquo;", "¬´").replace("&raquo;", "¬ª").replace("&quot;", "¬´").replace("&amp;", "&")
    text = re.sub(r" +", " ", text).strip()
    # —Å—Ç–∞–≤–∏–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
    text = re.sub(r"([,.!?;:])([^\s])", r"\1 \2", text)
    return text

def split_lead_details(text: str):
    """–õ–∏–¥ ‚Äî –ø–µ—Ä–≤–æ–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."""
    text = clean_html(text)
    # –∂—ë—Å—Ç–∫–∏–π —Ä–∞–∑—Ä–µ–∑ –ø–æ —Ç–æ—á–∫–µ/–≤–æ–ø—Ä–æ—Å/–≤–æ—Å–∫–ª/–¥–≤–æ–µ—Ç–æ—á–∏—é
    parts = re.split(r"(?<=[.!?])\s+", text, maxsplit=1)
    lead = parts[0].strip() if parts else ""
    details = parts[1].strip() if len(parts) > 1 else ""
    return lead, details

def extract_tags(title: str, count: int = 5):
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º –ø—Ä–µ–¥–ª–æ–≥–æ–≤)."""
    stop = set("–∏ –≤ –≤–æ –Ω–∞ —Å —Å–æ –æ –æ–± –æ—Ç –∏–∑ –¥–ª—è –ø–æ –ø—Ä–∏ –∫–∞–∫ —á—Ç–æ —ç—Ç–æ –∫ —É –¥–æ –Ω–∞–¥ –ø–æ–¥ –ø—Ä–æ –±–µ–∑".split())
    words = re.findall(r"[–ê-–Ø–∞-—èA-Za-z\-]{3,}", title.lower())
    words = [w for w in words if w not in stop]
    uniq = []
    for w in words:
        if w not in uniq:
            uniq.append(w)
        if len(uniq) >= count:
            break
    return uniq

# ------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ -------
def measure_text(draw, text, font):
    try:
        box = draw.textbbox((0, 0), text, font=font)
        return box[2] - box[0], box[3] - box[1]
    except Exception:
        return font.getsize(text)

# ------- –Ω–∞–¥—ë–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ -------
def load_font(size=32, bold=False):
    candidates = []
    if bold:
        candidates.append(os.path.join("data", "DejaVuSans-Bold.ttf"))
    else:
        candidates.append(os.path.join("data", "DejaVuSans.ttf"))

    if bold:
        candidates += [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
            "/usr/share/fonts/truetype/freefont/FreeSansBold.ttf",
        ]
    else:
        candidates += [
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "/usr/share/fonts/truetype/freefont/FreeSans.ttf",
        ]

    candidates += [
        "/Library/Fonts/Arial.ttf",
        "/System/Library/Fonts/Supplemental/Arial.ttf",
        "C:\\Windows\\Fonts\\arial.ttf",
        "C:\\Windows\\Fonts\\arialbd.ttf",
    ]
    for path in candidates:
        try:
            if os.path.exists(path):
                return ImageFont.truetype(path, size)
        except Exception:
            continue
    return ImageFont.load_default()

# ------- —Ä–∏—Å—É–µ–º —à–∞–ø–∫—É —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º -------
def draw_header_image(title: str, source_host: str, event_time: str):
    width, height = 900, 470
    img = Image.new("RGB", (width, height), (24, 24, 28))
    draw = ImageDraw.Draw(img)

    # –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
    for i in range(height):
        r = 50 + int(i * 120 / height)
        g = 40 + int(i * 80 / height)
        b = 100 + int(i * 70 / height)
        draw.line([(0, i), (width, i)], fill=(r, g, b))

    # –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—à–∫–∏
    for offset in (0, 60, 120):
        draw.polygon(
            [(0, 60 + offset), (width * 0.75, 0 + offset), (width, 0 + offset), (width, 80 + offset), (0, 140 + offset)],
            fill=(0, 0, 0, 40),
        )

    font_title = load_font(46, bold=True)
    font_small = load_font(22)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ (wrap)
    margin, offset = 60, 160
    for line in textwrap.wrap(title, width=24):
        draw.text((margin, offset), line, font=font_title, fill="white")
        _, th = measure_text(draw, line, font_title)
        offset += th + 10

    # –Ω–∏–∂–Ω–∏–π —Ñ—É—Ç–µ—Ä (–∏—Å—Ç–æ—á–Ω–∏–∫ + –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è)
    footer_text = f"source: {source_host}  ‚Ä¢  —Å–æ–±—ã—Ç–∏–µ: {event_time}"
    tw, th = measure_text(draw, footer_text, font_small)
    draw.text((width - tw - 24, height - th - 20), footer_text, font=font_small, fill=(230, 230, 235))

    # –∫—Ä—É–≥-¬´–ª–æ–≥–æ—Ç–∏–ø¬ª –≤–ª–µ–≤–æ —Å–≤–µ—Ä—Ö—É
    logo_size = 64
    logo = Image.new("RGB", (logo_size, logo_size), (220, 220, 230))
    logo_draw = ImageDraw.Draw(logo)
    logo_draw.ellipse((0, 0, logo_size, logo_size), fill=(180, 180, 190))
    img.paste(logo, (24, 20))

    out = BytesIO()
    img.save(out, format="PNG")
    out.seek(0)
    return out

# ------- –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É -------
def build_caption(title, lead, details, link, tags):
    def esc(s: str) -> str:
        return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    cap = f"<b>{esc(title)}</b>\n\n"
    if lead:
        cap += f"üì∞ {esc(lead)}\n\n"
    if details:
        cap += f"<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>\n{esc(details)}\n\n"
    if link:
        cap += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{esc(link)}'>{esc(link)}</a>\n\n"
    if tags:
        cap += "".join(f"#{esc(t)} " for t in tags)
    return cap[:MAX_CAPTION]

# ------- –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram -------
def tg_send_photo(image_io, caption_html):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    files = {"photo": ("header.png", image_io.getvalue(), "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption_html, "parse_mode": "HTML"}
    r = requests.post(url, data=data, files=files, timeout=30)
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", r.status_code, r.text)
        r.raise_for_status()

# ------- –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π -------
def fetch_latest_item():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–≤–µ–∂–∏–π —ç–ª–µ–º–µ–Ω—Ç (title, summary, link, source_host, published_local_str)."""
    items = []
    for rss in RSS_SOURCES:
        try:
            fp = feedparser.parse(rss)
        except Exception as e:
            print("RSS fail:", rss, e)
            continue
        for e in fp.entries[:10]:
            title = clean_html(getattr(e, "title", ""))
            summary = clean_html(getattr(e, "summary", "") or getattr(e, "description", ""))
            link = getattr(e, "link", "")
            if not (title and link):
                continue
            # published
            published = None
            if getattr(e, "published_parsed", None):
                published = datetime.fromtimestamp(time.mktime(e.published_parsed), tz=timezone.utc)
            elif getattr(e, "updated_parsed", None):
                published = datetime.fromtimestamp(time.mktime(e.updated_parsed), tz=timezone.utc)
            items.append((published, title, summary, link))
    if not items:
        return None

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (None –≤ –∫–æ–Ω–µ—Ü)
    items.sort(key=lambda x: (x[0] is None, x[0]), reverse=True)
    pub, title, summary, link = items[0]
    host = urlparse(link).hostname or ""
    # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
    event_time = datetime.now().strftime("%d.%m %H:%M") if pub is None else pub.astimezone().strftime("%d.%m %H:%M")
    return {
        "title": title,
        "summary": summary,
        "link": link,
        "host": host,
        "event_time": event_time,
    }

# ================== –û–°–ù–û–í–ù–û–ô –•–û–î ==================
def main():
    state = load_state()
    posted = set(state.get("posted_links", []))

    item = fetch_latest_item()
    if not item:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS.")
        return

    if item["link"] in posted:
        print("–°–≤–µ–∂–∏—Ö –Ω–µ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å (top —É–∂–µ –≤ posted.json).")
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    lead, details = split_lead_details(item["summary"] or item["title"])
    tags = extract_tags(item["title"], count=5)

    # –∫–∞—Ä—Ç–∏–Ω–∫–∞
    header_img = draw_header_image(item["title"], item["host"], item["event_time"])
    # –ø–æ–¥–ø–∏—Å—å
    caption = build_caption(item["title"], lead, details, item["link"], tags)

    # –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    tg_send_photo(header_img, caption)
    print("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:", item["title"])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state["posted_links"] = ([item["link"]] + list(posted))[:500]
    save_state(state)

if __name__ == "__main__":
    # –ù–∏–∫–∞–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ç—É—Ç –Ω–µ—Ç. –°–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–≤—è–∑–∫–µ —Å —Ç–≤–æ–∏–º workflow.
    main()
