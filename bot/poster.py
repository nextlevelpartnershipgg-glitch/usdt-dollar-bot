import os, io, json, time, textwrap, pathlib, hashlib, urllib.parse
from datetime import datetime, timezone
from dateutil import parser as dtparse
import feedparser, requests
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
from zoneinfo import ZoneInfo  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ======
BOT_TOKEN  = os.environ["BOT_TOKEN"]
CHANNEL_ID = os.environ["CHANNEL_ID"]  # –ø—Ä–∏–º–µ—Ä: @USDT_Dollar

# –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π (RSS)
RSS_FEEDS = [
    # –†–ë–ö
    "https://rssexport.rbc.ru/rbcnews/news/30/full.rss",

    # Lenta.ru
    "https://lenta.ru/rss/news",

    # –ì–∞–∑–µ—Ç–∞.ru
    "https://www.gazeta.ru/export/rss/lenta.xml",

    # –¢–ê–°–°
    "https://tass.ru/rss/v2.xml",

    # –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä
    "https://www.kommersant.ru/RSS/news.xml",
]

# –•—ç—à—Ç–µ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TAGS = "#–Ω–æ–≤–æ—Å—Ç–∏ #—ç–∫–æ–Ω–æ–º–∏–∫–∞ #–†–æ—Å—Å–∏—è #—Ñ–∏–Ω–∞–Ω—Å—ã #usdt #–¥–æ–ª–ª–∞—Ä"

# –ü–∞–ø–∫–∏/—Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
DATA_DIR = pathlib.Path("data")
DATA_DIR.mkdir(parents=True, exist_ok=True)
STATE_FILE = DATA_DIR / "state.json"

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def load_state():
    if STATE_FILE.exists():
        return json.loads(STATE_FILE.read_text(encoding="utf-8"))
    return {}

def save_state(state):
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

def domain(url):
    return urllib.parse.urlparse(url).netloc.replace("www.", "") or "source"

def clean_html(html):
    if not html:
        return ""
    soup = BeautifulSoup(html, "html.parser")
    return " ".join(soup.get_text(separator=" ").split())

def make_caption(title, summary, link):
    title = title.strip()
    summary = (summary or "").strip()
    if len(summary) > 300:
        summary = summary[:297] + "‚Ä¶"
    caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    # Telegram caption –ª–∏–º–∏—Ç ~1024 —Å–∏–º–≤–æ–ª–∞
    if len(caption) > 1020:
        extra = len(caption) - 1020
        summary = summary[:-extra-1] + "‚Ä¶"
        caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    return caption

def draw_card(title_text, src_domain, summary_text=""):
    BRAND = "USDT=Dollar"
    TZ = os.environ.get("TIMEZONE", "Europe/Moscow")  # –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    W, H = 1080, 1080

    # –¶–≤–µ—Ç–∞/—Å—Ç–∏–ª–∏
    bg = (18, 20, 22)         # —Ñ–æ–Ω
    green = (16, 185, 129)    # –∞–∫—Ü–µ–Ω—Ç
    text_main = (235, 235, 235)
    text_muted = (165, 165, 165)
    black = (0, 0, 0)

    img = Image.new("RGB", (W, H), bg)
    d = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç—ã
    font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 64)
    font_brand = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 36)
    font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 30)
    font_summary = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 40)

    # –í–µ—Ä—Ö–Ω—è—è –±—Ä–µ–Ω–¥-–ø–ª–∞—à–∫–∞
    d.rectangle([(0, 0), (W, 140)], fill=green)
    d.text((40, 45), BRAND, fill=black, font=font_brand)

    # –í—Ä–µ–º—è
    try:
        tz = ZoneInfo(TZ)
    except Exception:
        tz = ZoneInfo("UTC")
    now_str = datetime.now(tz).strftime("%d.%m %H:%M")
    d.text((W - 40 - d.textlength(now_str, font=font_small), 50), now_str, fill=black, font=font_small)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    margin_x = 80
    y = 180
    for line in textwrap.wrap(title_text, width=22)[:6]:
        d.text((margin_x, y), line, font=font_title, fill=text_main)
        y += 80

    # Summary (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç)
    if summary_text:
        short = summary_text.strip().replace("\n", " ")
        if len(short) > 320:
            short = short[:317] + "‚Ä¶"
        y_sum = y + 20
        for ln in textwrap.wrap(short, width=32):
            if y_sum + 50 > H - 120:
                break
            d.text((margin_x, y_sum), ln, font=font_summary, fill=text_main)
            y_sum += 54

    # –ù–∏–∑: –∏—Å—Ç–æ—á–Ω–∏–∫
    src = f"source: {src_domain}"
    d.text((margin_x, H - 70), src, font=font_small, fill=text_muted)

    bio = io.BytesIO()
    img.save(bio, format="PNG", optimize=True)
    bio.seek(0)
    return bio

def send_photo(photo_bytes, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    files = {"photo": ("cover.png", photo_bytes, "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption}
    r = requests.post(url, files=files, data=data, timeout=30)
    r.raise_for_status()
    return r.json()

# ====== –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ======
def main():
    state = load_state()

    for feed_url in RSS_FEEDS:
        fp = feedparser.parse(feed_url)
        if not fp.entries:
            continue

        def parse_dt(e):
            ts = getattr(e, "published", getattr(e, "updated", "")) or ""
            try:
                return dtparse.parse(ts)
            except Exception:
                return datetime(1970,1,1, tzinfo=timezone.utc)

        entry = sorted(fp.entries, key=parse_dt, reverse=True)[0]

        link = getattr(entry, "link", "")
        title = getattr(entry, "title", "").strip() or "(no title)"
        summary = clean_html(getattr(entry, "summary", getattr(entry, "description", "")))

        entry_uid = hashlib.sha256((link or title).encode("utf-8")).hexdigest()
        last_uid = state.get(feed_url, "")

        if entry_uid == last_uid:
            continue

        cap = make_caption(title, summary, link or feed_url)
        card = draw_card(title, domain(link or feed_url), summary)

        try:
            send_photo(card, cap)
            state[feed_url] = entry_uid
            time.sleep(2)
        except Exception as e:
            print("Error sending:", e)

    save_state(state)

if __name__ == "__main__":
    main()
