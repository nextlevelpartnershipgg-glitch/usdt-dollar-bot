import os, io, json, time, textwrap, pathlib, hashlib, urllib.parse, sys
from datetime import datetime, timezone
from dateutil import parser as dtparse
import feedparser, requests
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
from zoneinfo import ZoneInfo

# ====== –û–ö–†–£–ñ–ï–ù–ò–ï ======
BOT_TOKEN  = os.environ["BOT_TOKEN"]
CHANNEL_ID = os.environ["CHANNEL_ID"]              # @USDT_Dollar –∏–ª–∏ -100xxxxxxxxx
TIMEZONE   = os.environ.get("TIMEZONE", "Europe/Moscow")

# –†—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
RSS_FEEDS = [
    "https://rssexport.rbc.ru/rbcnews/news/30/full.rss",  # –†–ë–ö
    "https://lenta.ru/rss/news",                          # Lenta.ru
    "https://www.gazeta.ru/export/rss/lenta.xml",         # –ì–∞–∑–µ—Ç–∞.ru
    "https://tass.ru/rss/v2.xml",                         # –¢–ê–°–°
    "https://www.kommersant.ru/RSS/news.xml",             # –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä
]

# –•—ç—à—Ç–µ–≥–∏
TAGS = "#–Ω–æ–≤–æ—Å—Ç–∏ #—Ä—ã–Ω–∫–∏ #–∞–∫—Ü–∏–∏ #—ç–∫–æ–Ω–æ–º–∏–∫–∞ #usdt #–¥–æ–ª–ª–∞—Ä"

# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
DATA_DIR = pathlib.Path("data"); DATA_DIR.mkdir(parents=True, exist_ok=True)
STATE_FILE = DATA_DIR / "state.json"

# ====== –£–¢–ò–õ–ò–¢–´ ======
def load_state():
    if STATE_FILE.exists():
        return json.loads(STATE_FILE.read_text(encoding="utf-8"))
    return {}

def save_state(state):
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

def domain(url):
    return urllib.parse.urlparse(url).netloc.replace("www.", "") or "source"

def clean_html(html):
    if not html:
        return ""
    soup = BeautifulSoup(html, "html.parser")
    return " ".join(soup.get_text(separator=" ").split())

def make_caption(title, summary, link):
    title = title.strip()
    summary = (summary or "").strip()
    if len(summary) > 300:
        summary = summary[:297] + "‚Ä¶"
    caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    if len(caption) > 1020:  # –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ Telegram
        extra = len(caption) - 1020
        summary = summary[:-extra-1] + "‚Ä¶"
        caption = f"üíµ {title}\n‚Äî {summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}\n{TAGS}"
    return caption

# --- —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ---
POS_WORDS = ["—Ä–æ—Å—Ç", "–≤—ã—à–µ", "–ø–æ–¥–æ—Ä–æ–∂–∞–ª", "—É–∫—Ä–µ–ø–∏–ª", "—Ä–µ–∫–æ—Ä–¥", "–≤—ã—Ä–æ—Å", "–ø–æ–≤—ã—Å–∏–ª", "—É–ª—É—á—à", "–ø—Ä–∏–±—ã–ª—å", "–æ–ø—Ç–∏–º–∏–∑–º", "–ø–æ–¥—ä–µ–º"]
NEG_WORDS = ["–ø–∞–¥–µ–Ω–∏", "–Ω–∏–∂–µ", "–ø–æ–¥–µ—à–µ–≤", "–æ—Å–ª–∞–±", "–æ–±–≤–∞–ª", "–∫—Ä–∏–∑–∏—Å", "—Å–Ω–∏–∂–µ–Ω", "—É—Ö—É–¥—à–µ–Ω", "—É–±—ã—Ç–æ–∫", "—Å—Ç—Ä–∞—Ö", "–ø–∞–Ω–∏–∫", "—Å–ø–∞–¥"]

def sentiment(text):
    t = (text or "").lower()
    pos = any(w in t for w in POS_WORDS)
    neg = any(w in t for w in NEG_WORDS)
    if pos and not neg: return "pos"
    if neg and not pos: return "neg"
    return "neutral"

# --- –∫–∞—Ä—Ç–æ—á–∫–∞ 1080x540 ---
def draw_card(title_text, src_domain, summary_text=""):
    BRAND = "USDT=Dollar"
    W, H = 1920, 1980 

    tone = sentiment(f"{title_text} {summary_text}")
    if tone == "pos":
        bg = (8, 94, 60)      # –∑–µ–ª—ë–Ω—ã–π
        accent = (16, 185, 129)
        arrow = "‚Üë"
    elif tone == "neg":
        bg = (120, 22, 34)    # –∫—Ä–∞—Å–Ω—ã–π
        accent = (239, 68, 68)
        arrow = "‚Üì"
    else:
        bg = (18, 20, 22)     # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
        accent = (100, 116, 139)
        arrow = "‚Üí"

    text_main  = (240, 240, 240)
    text_muted = (200, 200, 200)
    black = (0, 0, 0)

    img = Image.new("RGB", (W, H), bg)
    d = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç—ã
    font_brand   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 36)
    font_time    = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 28)
    font_title   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 56)
    font_summary = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 34)
    font_small   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 26)
    font_arrow   = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 64)

    # –í–µ—Ä—Ö–Ω—è—è –ø–ª–∞—à–∫–∞
    d.rectangle([(0,0),(W,90)], fill=accent)
    d.text((28, 26), BRAND, fill=black, font=font_brand)

    # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        tz = ZoneInfo(TIMEZONE)
    except Exception:
        tz = ZoneInfo("UTC")
    now_str = datetime.now(tz).strftime("%d.%m %H:%M")
    d.text((W - 28 - d.textlength(now_str, font=font_time), 26), now_str, fill=black, font=font_time)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞
    d.text((W - 90, 100), arrow, fill=accent, font=font_arrow)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    margin_x = 40
    y = 110
    for line in textwrap.wrap(title_text, width=28)[:3]:
        d.text((margin_x, y), line, font=font_title, fill=text_main)
        y += 66

    # Summary
    if summary_text:
        short = summary_text.strip().replace("\n", " ")
        if len(short) > 220:
            short = short[:217] + "‚Ä¶"
        y_sum = y + 8
        for ln in textwrap.wrap(short, width=40):
            if y_sum + 40 > H - 70:
                break
            d.text((margin_x, y_sum), ln, font=font_summary, fill=text_main)
            y_sum += 40

    # –ù–∏–∑: –∏—Å—Ç–æ—á–Ω–∏–∫
    src = f"source: {src_domain}"
    d.text((margin_x, H - 48), src, font=font_small, fill=text_muted)

    bio = io.BytesIO()
    img.save(bio, format="PNG", optimize=True)
    bio.seek(0)
    return bio

def send_photo(photo_bytes, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    files = {"photo": ("cover.png", photo_bytes, "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption}
    r = requests.post(url, files=files, data=data, timeout=30)
    r.raise_for_status()
    return r.json()

# ====== –õ–û–ì–ò–ö–ê ======
def process_item(link, title, summary):
    cap  = make_caption(title, summary, link or "")
    card = draw_card(title, domain(link or ""), summary)
    send_photo(card, cap)

def run_cron_mode():
    state = load_state()
    for feed_url in RSS_FEEDS:
        fp = feedparser.parse(feed_url)
        if not fp.entries:
            continue

        def parse_dt(e):
            ts = getattr(e, "published", getattr(e, "updated", "")) or ""
            try:
                return dtparse.parse(ts)
            except Exception:
                return datetime(1970,1,1, tzinfo=timezone.utc)

        entry = sorted(fp.entries, key=parse_dt, reverse=True)[0]

        link    = getattr(entry, "link", "") or ""
        title   = (getattr(entry, "title", "") or "").strip() or "(no title)"
        summary = clean_html(getattr(entry, "summary", getattr(entry, "description", "")))

        entry_uid = hashlib.sha256((link or title).encode("utf-8")).hexdigest()
        last_uid  = state.get(feed_url, "")

        if entry_uid == last_uid:
            continue

        try:
            process_item(link, title, summary)
            state[feed_url] = entry_uid
            time.sleep(1.2)
        except Exception as e:
            print("Error sending:", e)

    save_state(state)

def run_single_mode():
    title   = os.environ.get("USDT_TITLE", "").strip()
    link    = os.environ.get("USDT_LINK", "")
    summary = clean_html(os.environ.get("USDT_SUM", ""))
    if not title:
        print("No USDT_TITLE provided")
        return
    try:
        process_item(link, title, summary)
    except Exception as e:
        print("Error sending single:", e)

if __name__ == "__main__":
    if "--single" in sys.argv:
        run_single_mode()
    else:
        run_cron_mode()
